import typing

__package__: str
__version__: str
__author__: str

class Region:
    @property
    def start(self) -> int: ...
    @property
    def end(self) -> int: ...
    def __str__(self) -> str: ...

class Repeat(Region): ...
class Spacer(Region): ...

class Repeats(typing.Sequence[Repeat]):
    def __getitem__(self, i: int) -> Spacer: ...
    def __len__(self) -> int: ...

class Spacers(typing.Sequence[Spacer]):
    def __getitem__(self, i: int) -> Spacer: ...
    def __len__(self) -> int: ...

class Crispr:
    @property
    def start(self) -> int: ...
    @property
    def end(self) -> int: ...
    @property
    def repeats(self) -> Repeats: ...
    @property
    def spacers(self) -> Spacers: ...
    def __len__(self) -> int: ...
    def __str__(self) -> str: ...

class Scanner(typing.Iterator[Crispr]):
    def __iter__(self) -> Scanner: ...
    def __next__(self) -> Crispr: ...

def scan(sequence: str) -> Scanner: ...
